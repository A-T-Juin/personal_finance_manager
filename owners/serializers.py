from rest_framework import serializers
from .models import Owner
from rest_framework.validators import UniqueValidator
from budgets.serializers import BudgetSerializer

class OwnerSerializer(serializers.ModelSerializer):
    # Serializer is used to convert from parsed data
    # To complex data and viceversa
    # Defines what fields client can work with
    username = serializers.CharField(
        required=True,
        # Each owner MUST have a username
        max_length=15,
        # Sets the maxiumum length of the username to 15
        validators=[UniqueValidator(queryset=Owner.objects.all())]
        # This ensures that each username is unique
    )
    email = serializers.EmailField(
        required=True,
        # Each owner MUST also have an email
    )
    password = serializers.CharField(
        required=True,
        # Each owner MUST have a password
        max_length=128,
        # Length of password can be up to 128 digits...
        min_length=8
        # At least 8 digits
    )
    budgets = BudgetSerializer(many=True, read_only=False, required=False)
    # This is a nested field named "receipts" and is controlled by
    # The ReceiptSerializer in the receipts directory
    class Meta:
        model = Owner
        fields = (
            'id',
            # This field is automatically generated by django
            # This is what we operate on to edit/delete/fetch
            'username',
            'email',
            'password',
            'budgets'
            # These fields are the ones that we listed up above
        )

    def create(self, validated_data):
        # This method is called when creating new Owners
        BudgetDurationOwner = Owner.objects.create_owner(validated_data['username'], validated_data['email'], validated_data['password'])
        # The above function creates the instance in our database
        return BudgetDurationOwner
        # This returns the owner instance, so it can be
        # Also used in the response
